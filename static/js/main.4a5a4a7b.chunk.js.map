{"version":3,"sources":["components/Header/Header.js","components/TodoItem/TodoItem.js","components/TodoList/TodoList.js","shapes/todoShape.js","components/ToggleAll/ToggleAll.js","components/Main/Main.js","components/FilterItem/FilterItem.js","components/TodosFilter/TodosFilter.js","components/Footer/Footer.js","components/TodoApp/TodoApp.js","App.js","index.js"],"names":["Header","state","value","handleAddTodo","event","key","target","setState","prevState","props","onAddTodo","handleOnChange","className","placeholder","this","onKeyDown","onChange","React","Component","TodoItem","editing","title","editInput","createRef","handleDoubleClick","completed","handleTodoChange","handleTodoChangeImplementation","saveTodo","cancelTodoEditing","handleTitleChange","todoIndex","current","focus","type","checked","handleStatusChange","onDoubleClick","onClick","handleTodoRemove","onBlur","ref","TodoList","PropTypes","shape","string","isRequired","id","number","bool","items","filter","map","todo","index","ToggleAll","allCompleted","handleToggleAll","htmlFor","Main","todos","notCompletedTodos","length","FilterItem","handleFilterStatusChange","activeFilter","filterValue","href","charAt","toUpperCase","slice","TodosFilter","item","Footer","todosAmount","handleCompletedRemove","TodoApp","storageName","JSON","parse","window","localStorage","getItem","notCompleted","addTodo","todosLength","removeTodo","updatedTodos","removedItem","splice","removeCompleted","changeTodoStatus","newStatus","toggleEveryTodoStatus","allChecked","i","changeTodoTitle","changeFilterStatus","getNumOfNotCompletedTodos","updateStorage","setItem","stringify","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4a5a4a7b.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Header extends React.Component {\n  state = {\n    value: '',\n  };\n\n  handleAddTodo = (event) => {\n    if (event.key === 'Enter' && event.target.value) {\n      this.setState((prevState) => {\n        this.props.onAddTodo(prevState.value);\n\n        return ({\n          value: '',\n        });\n      });\n    }\n  };\n\n  handleOnChange = (event) => {\n    this.setState({\n      value: event.target.value,\n    });\n  };\n\n  render() {\n    return (\n      <header className=\"header\">\n        <h1>todos</h1>\n\n        <input\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n          value={this.state.value}\n          onKeyDown={this.handleAddTodo}\n          onChange={this.handleOnChange}\n        />\n      </header>\n    );\n  }\n}\n\nexport { Header };\n\nHeader.propTypes = {\n  onAddTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass TodoItem extends React.Component {\n  state = {\n    editing: false,\n    title: this.props.title,\n  };\n\n  editInput = React.createRef();\n\n  // todo: set focus for editing input - maybe needs refactor\n  componentDidUpdate() {\n    this.editInput.current.focus();\n  }\n\n  handleDoubleClick = () => {\n    this.setState({\n      editing: !this.props.completed,\n    });\n  };\n\n  handleTodoChange = (event) => {\n    this.setState({\n      title: event.target.value,\n    });\n  };\n\n  handleTodoChangeImplementation = (event) => {\n    if (event.key === 'Enter') {\n      this.saveTodo();\n    } else if (event.key === 'Escape') {\n      this.cancelTodoEditing();\n    }\n  };\n\n  saveTodo = () => {\n    this.setState((prevState) => {\n      this.props.handleTitleChange(this.props.todoIndex, prevState.title);\n\n      return ({\n        editing: false,\n      });\n    });\n  };\n\n  cancelTodoEditing = () => {\n    this.setState({\n      editing: false,\n      title: this.props.title,\n    });\n  };\n\n  render() {\n    return (\n      <li\n        className={`${\n          (this.props.completed && 'completed')\n          || (this.state.editing && 'editing') || ''\n        }`}\n      >\n        <div className=\"view\">\n          <input\n            type=\"checkbox\"\n            className=\"toggle\"\n            // id={`todo-${this.props.id}`}\n            checked={this.props.completed}\n            onChange={this.props.handleStatusChange}\n          />\n          <label\n            // todo onclick preventDefault causes lint errors -_-\n            // htmlFor={`todo-${this.props.id}`}\n            // onClick={(event) => {\n            //   event.preventDefault();\n            // }}\n            onDoubleClick={this.handleDoubleClick}\n          >\n            {this.props.title}\n          </label>\n          <button\n            type=\"button\"\n            className=\"destroy\"\n            onClick={this.props.handleTodoRemove}\n          />\n        </div>\n        <input\n          type=\"text\"\n          className=\"edit\"\n          value={this.state.title}\n          onChange={this.handleTodoChange}\n          onKeyDown={this.handleTodoChangeImplementation}\n          onBlur={this.saveTodo}\n          ref={this.editInput}\n        />\n      </li>\n    );\n  }\n}\n\nexport { TodoItem };\n\nTodoItem.propTypes = {\n  // id: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  completed: PropTypes.bool.isRequired,\n  todoIndex: PropTypes.number.isRequired,\n  handleStatusChange: PropTypes.func.isRequired,\n  handleTitleChange: PropTypes.func.isRequired,\n  handleTodoRemove: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TodoItem } from '../TodoItem/TodoItem';\nimport { todoShape } from '../../shapes/todoShape';\n\nexport const TodoList = ({\n  items,\n  handleStatusChange,\n  handleTitleChange,\n  handleTodoRemove,\n  filter,\n}) => (\n  <ul className=\"todo-list\">\n    {items.map((todo, index) => (\n      (filter === 'all' || (filter === 'active' && !todo.completed)\n        || (filter === 'completed' && todo.completed))\n      && (\n        <TodoItem\n          key={todo.id}\n          {...todo}\n          todoIndex={index}\n          handleStatusChange={() => {\n            handleStatusChange(index);\n          }}\n          handleTitleChange={handleTitleChange}\n          handleTodoRemove={() => {\n            handleTodoRemove(index);\n          }}\n        />\n      )\n    ))}\n  </ul>\n);\n\nTodoList.propTypes = {\n  items: PropTypes.arrayOf(todoShape).isRequired,\n  filter: PropTypes.string.isRequired,\n  handleStatusChange: PropTypes.func.isRequired,\n  handleTitleChange: PropTypes.func.isRequired,\n  handleTodoRemove: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\n\nexport const todoShape = PropTypes.shape({\n  title: PropTypes.string.isRequired,\n  id: PropTypes.number.isRequired,\n  completed: PropTypes.bool.isRequired,\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const ToggleAll = ({ allCompleted, handleToggleAll }) => (\n  <>\n    <input\n      type=\"checkbox\"\n      id=\"toggle-all\"\n      className=\"toggle-all\"\n      checked={allCompleted}\n      onChange={handleToggleAll}\n    />\n    <label htmlFor=\"toggle-all\">Mark all as complete</label>\n  </>\n);\n\nToggleAll.propTypes = {\n  allCompleted: PropTypes.bool.isRequired,\n  handleToggleAll: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TodoList } from '../TodoList/TodoList';\nimport { ToggleAll } from '../ToggleAll/ToggleAll';\nimport { todoShape } from '../../shapes/todoShape';\n\nexport const Main = ({\n  todos,\n  handleStatusChange,\n  handleTitleChange,\n  handleTodoRemove,\n  handleToggleAll,\n  notCompletedTodos,\n  filter,\n}) => (\n  <section className=\"main\">\n    {\n      !!todos.length\n      && (\n        <ToggleAll\n          handleToggleAll={handleToggleAll}\n          allCompleted={!notCompletedTodos}\n        />\n      )\n    }\n\n    <TodoList\n      items={todos}\n      filter={filter}\n      handleStatusChange={handleStatusChange}\n      handleTitleChange={handleTitleChange}\n      handleTodoRemove={handleTodoRemove}\n    />\n  </section>\n);\n\nMain.propTypes = {\n  todos: PropTypes.arrayOf(todoShape).isRequired,\n  notCompletedTodos: PropTypes.number.isRequired,\n  filter: PropTypes.string.isRequired,\n  handleStatusChange: PropTypes.func.isRequired,\n  handleTitleChange: PropTypes.func.isRequired,\n  handleTodoRemove: PropTypes.func.isRequired,\n  handleToggleAll: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const FilterItem = ({\n  handleFilterStatusChange,\n  activeFilter,\n  filterValue,\n}) => (\n  <a\n    href={`#/${filterValue}`}\n    className={`${activeFilter === filterValue ? 'selected' : ''}`}\n    onClick={() => {\n      handleFilterStatusChange(filterValue);\n    }}\n  >\n    {filterValue.charAt(0).toUpperCase() + filterValue.slice(1)}\n  </a>\n);\n\nFilterItem.propTypes = {\n  filterValue: PropTypes.string.isRequired,\n  activeFilter: PropTypes.string.isRequired,\n  handleFilterStatusChange: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FilterItem } from '../FilterItem/FilterItem';\n\nexport const TodosFilter = ({ handleFilterStatusChange, activeFilter }) => {\n  const filterStatusItems = ['all', 'active', 'completed'];\n\n  return (\n    <ul className=\"filters\">\n      {filterStatusItems.map(item => (\n        <li key={item}>\n          <FilterItem\n            filterValue={item}\n            handleFilterStatusChange={handleFilterStatusChange}\n            activeFilter={activeFilter}\n          />\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nTodosFilter.propTypes = {\n  activeFilter: PropTypes.string.isRequired,\n  handleFilterStatusChange: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TodosFilter } from '../TodosFilter/TodosFilter';\n\nexport const Footer = ({\n  todosAmount,\n  notCompletedTodos,\n  handleCompletedRemove,\n  handleFilterStatusChange,\n  activeFilter,\n}) => (\n  <footer className=\"footer\">\n    <span className=\"todo-count\">\n      {notCompletedTodos}\n      {' '}\n      items left\n    </span>\n\n    <TodosFilter\n      handleFilterStatusChange={handleFilterStatusChange}\n      activeFilter={activeFilter}\n    />\n\n    {\n      todosAmount > notCompletedTodos\n      && (\n        <button\n          type=\"button\"\n          className=\"clear-completed\"\n          onClick={handleCompletedRemove}\n        >\n          Clear completed\n        </button>\n      )\n    }\n  </footer>\n);\n\nFooter.propTypes = {\n  todosAmount: PropTypes.number.isRequired,\n  notCompletedTodos: PropTypes.number.isRequired,\n  activeFilter: PropTypes.string.isRequired,\n  handleCompletedRemove: PropTypes.func.isRequired,\n  handleFilterStatusChange: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport { Header } from '../Header/Header';\nimport { Main } from '../Main/Main';\nimport { Footer } from '../Footer/Footer';\n\nclass TodoApp extends React.Component {\n  storageName = 'hvb-todos';\n\n  state = {\n    todos: JSON.parse(window.localStorage.getItem(this.storageName)) || [],\n    notCompleted: 0,\n    filter: 'all',\n  };\n\n  componentDidMount() {\n    this.setState(prevState => ({\n      notCompleted: this.getNumOfNotCompletedTodos(prevState.todos),\n    }));\n  }\n\n  componentDidUpdate() {\n    this.updateStorage(this.state.todos);\n  }\n\n  addTodo = (title) => {\n    this.setState((prevState) => {\n      const todosLength = prevState.todos.length;\n      const updatedList = [...prevState.todos, {\n        title,\n        id: todosLength ? prevState.todos[todosLength - 1].id + 1 : 1,\n        completed: false,\n      }];\n\n      return ({\n        todos: updatedList,\n        notCompleted: prevState.notCompleted + 1,\n      });\n    });\n  };\n\n  removeTodo = (todoIndex) => {\n    this.setState((prevState) => {\n      const updatedTodos = [...prevState.todos];\n      const removedItem = updatedTodos.splice(todoIndex, 1)[0];\n\n      return ({\n        todos: updatedTodos,\n        notCompleted: prevState.notCompleted - +(!removedItem.completed),\n      });\n    });\n  };\n\n  removeCompleted = () => {\n    this.setState(prevState => ({\n      todos: [...prevState.todos.filter(item => !item.completed)],\n    }));\n  };\n\n  changeTodoStatus = (todoIndex, completed) => {\n    this.setState((prevState) => {\n      // todo: is copy needed?\n      const updatedTodos = [...prevState.todos];\n      const newStatus = completed || !updatedTodos[todoIndex].completed;\n\n      updatedTodos[todoIndex].completed = newStatus;\n\n      return ({\n        todos: updatedTodos,\n        notCompleted: (newStatus) ? (prevState.notCompleted - 1)\n          : (prevState.notCompleted + 1),\n      });\n    });\n  };\n\n  toggleEveryTodoStatus = (event) => {\n    const allChecked = event.target.checked;\n\n    this.setState((prevState) => {\n      // todo: is copy needed?\n      const updatedTodos = [...prevState.todos];\n\n      for (let i = 0; i < updatedTodos.length; i += 1) {\n        updatedTodos[i].completed = allChecked;\n      }\n\n      return ({\n        todos: updatedTodos,\n        notCompleted: allChecked ? 0 : updatedTodos.length,\n      });\n    });\n  };\n\n  changeTodoTitle = (todoIndex, value) => {\n    this.setState((prevState) => {\n      const updatedTodos = [...prevState.todos];\n\n      updatedTodos[todoIndex].title = value;\n\n      return ({\n        todos: updatedTodos,\n      });\n    });\n  };\n\n  changeFilterStatus = (value) => {\n    this.setState({\n      filter: value,\n    });\n  };\n\n  // eslint-disable-next-line max-len\n  getNumOfNotCompletedTodos = todos => todos.filter(item => !item.completed).length;\n\n  updateStorage = (todos) => {\n    window.localStorage.setItem(\n      this.storageName,\n      JSON.stringify(todos),\n    );\n  };\n\n  render() {\n    return (\n      <section className=\"todoapp\">\n        <Header onAddTodo={this.addTodo} />\n        <Main\n          todos={this.state.todos}\n          handleStatusChange={this.changeTodoStatus}\n          handleTitleChange={this.changeTodoTitle}\n          handleTodoRemove={this.removeTodo}\n          handleToggleAll={this.toggleEveryTodoStatus}\n          notCompletedTodos={this.state.notCompleted}\n          filter={this.state.filter}\n        />\n        {\n          !!this.state.todos.length\n          && (\n            <Footer\n              todosAmount={this.state.todos.length}\n              notCompletedTodos={this.state.notCompleted}\n              handleCompletedRemove={this.removeCompleted}\n              handleFilterStatusChange={this.changeFilterStatus}\n              activeFilter={this.state.filter}\n            />\n          )\n        }\n      </section>\n    );\n  }\n}\n\nexport { TodoApp };\n","import React from 'react';\nimport { TodoApp } from './components/TodoApp/TodoApp';\n\nfunction App() {\n  return (\n    <TodoApp />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}